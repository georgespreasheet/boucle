function ddd() {
  const sourceSheetId = 'xxx';
  const sourceSheetName = 'xxxx';
  const destinationSheetName = 'xxxxx';
  
  var destinationSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(destinationSheetName);
  if (!destinationSheet) {
    throw new Error('Feuille de calcul destination introuvable');
  }

  var sourceSheet = SpreadsheetApp.openById(sourceSheetId).getSheetByName(sourceSheetName);
  if(!sourceSheet){
    throw new Error('Feuille de calcul destination introuvable');
  }
  
  var lastRow = sourceSheet.getLastRow();
  const startRow = 2; // La première ligne de données de la feuille de calcul source
  const startColumn = 2; // La première colonne de données de la feuille de calcul source
  var numRows = lastRow; // Le nombre de lignes de données à récupérer de la feuille de calcul source (0 pour toutes les lignes)
  const numColumns = 10; // Le nombre de colonnes de données à récupérer de la feuille de calcul source
  
  var sourceRange = sourceSheet.getRange(startRow, startColumn, numRows, numColumns);
  var sourceData = sourceRange.getValues();
  var nonEmpty = sourceData.filter(function(row){
    return row.join('').length>0
  })

  numRows= nonEmpty.length;
  sourceRange = sourceSheet.getRange(startRow, startColumn, numRows, numColumns);
  var sourceData = sourceRange.getValues();

  
  
  var lastRow2 = destinationSheet.getLastRow();
  const startRow2 = 2; // La première ligne de données de la feuille de calcul source
  const startColumn2 = 2; // La première colonne de données de la feuille de calcul source
  var numRows2 = lastRow2; // Le nombre de lignes de données à récupérer de la feuille de calcul source (0 pour toutes les lignes)
  const numColumns2 = 10; // Le nombre de colonnes de données à récupérer de la feuille de calcul source
  
  
  var destinationRange = destinationSheet.getRange(startRow2, startColumn2, numRows2, numColumns2);
  var destinationData = destinationRange.getValues();

  var nonEmpty2 = destinationData.filter(function(row){
    return row.join('').length>0
  })
  numRows2= nonEmpty2.length;

  var destinationRange = destinationSheet.getRange(startRow2, startColumn2, numRows2, numColumns2);
  var destinationData = destinationRange.getValues();
  
  const sourceRows = sourceRange.getValues().map(function(row) {
    return row.join(); // On ne compare que la colonne B
  });
  
  const destinationRows = destinationRange.getValues().map(function(row) {
    return row.join(); // On ne compare que la colonne B
  });

  var rowsToDelete = [];

  destinationRows.forEach(function(row, index) {
    if (!sourceRows.includes(row)) {
      rowsToDelete.push(index + 1);
    }
  });
  
  rowsToDelete.reverse().forEach(function(rowToDelete) {
    destinationSheet.deleteRow(rowToDelete);
  });
}
