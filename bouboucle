function ddd() {
  const sourceSheetId = 'xxx';
  const sourceSheetName = 'xxxx';
  const destinationSheetName = 'xxxxx';
  
  var destinationSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(destinationSheetName);
  if (!destinationSheet) {
    throw new Error('Feuille de calcul destination introuvable');
  }

  var sourceSheet = SpreadsheetApp.openById(sourceSheetId).getSheetByName(sourceSheetName);
  if(!sourceSheet){
    throw new Error('Feuille de calcul destination introuvable');
  }
  
  var lastRow = sourceSheet.getLastRow();
  const startRow = 2; // La première ligne de données de la feuille de calcul source
  const startColumn = 2; // La première colonne de données de la feuille de calcul source
  var numRows = lastRow; // Le nombre de lignes de données à récupérer de la feuille de calcul source (0 pour toutes les lignes)
  const numColumns = 10; // Le nombre de colonnes de données à récupérer de la feuille de calcul source
  
  var sourceRange = sourceSheet.getRange(startRow, startColumn, numRows, numColumns);
  var sourceData = sourceRange.getValues();
  var nonEmpty = sourceData.filter(function(row){
    return row.join('').length>0
  })

  numRows= nonEmpty.length;
  sourceRange = sourceSheet.getRange(startRow, startColumn, numRows, numColumns);
  var sourceData = sourceRange.getValues();

  
  
  var lastRow2 = destinationSheet.getLastRow();
  const startRow2 = 2; // La première ligne de données de la feuille de calcul source
  const startColumn2 = 2; // La première colonne de données de la feuille de calcul source
  var numRows2 = lastRow2; // Le nombre de lignes de données à récupérer de la feuille de calcul source (0 pour toutes les lignes)
  const numColumns2 = 10; // Le nombre de colonnes de données à récupérer de la feuille de calcul source
  
  
  var destinationRange = destinationSheet.getRange(startRow2, startColumn2, numRows2, numColumns2);
  var destinationData = destinationRange.getValues();

  var nonEmpty2 = destinationData.filter(function(row){
    return row.join('').length>0
  })
  numRows2= nonEmpty2.length;

  var destinationRange = destinationSheet.getRange(startRow2, startColumn2, numRows2, numColumns2);
  var destinationData = destinationRange.getValues();

  
  

   const sourceRows = sourceRange.getValues().map(function(row) {
    return row.join(); // On ne compare que la colonne B
  });
  
  const destinationRows = destinationRange.getValues().map(function(row) {
    return row.join(); // On ne compare que la colonne B
  });

  
 

  var f = []
  const rowsToDelete = destinationRows.filter(function(destinationRow,indx) {
    return !sourceRows.includes(destinationRow,indx)})
  for (var i = 0;i<rowsToDelete.length;i++){
    f.push(rowsToDelete.splice(0,1))
  }
  

  destinationData.forEach(function(row){
    var dataS = row.join();
    var a = f.find(function(r){
      
      return dataS===r[0]
      
    })
    if(!a){
      
      //destinationSheet.deleteRows(i+2)

    }
  })
  

  
  
  

  //destinationSheet.getRange(2,1).setFormula("=arrayformula(CONCAT(\"#\",SEQUENCE(Q1)))")
  //destinationSheet.getRange(2,4).setFormula("=iferror(ARRAYFORMULA(VLOOKUP(B2:B,Sheet15!$A$1:$C,3,FALSE)))")
  //destinationSheet.getRange(2,1,numRows2,14).sort([{ column: 4, ascending: true }]);
 
  
  





}
